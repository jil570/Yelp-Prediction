{"nbformat":4,"nbformat_minor":0,"metadata":{"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.6.8"},"colab":{"name":"Main_WordEmbedding.ipynb","provenance":[],"collapsed_sections":[]},"accelerator":"GPU"},"cells":[{"cell_type":"markdown","metadata":{"id":"iiM5yWl3oB1i","colab_type":"text"},"source":["# Main Model - CNN with Language Embedding"]},{"cell_type":"code","metadata":{"id":"iyNa22qyU_kS","colab_type":"code","outputId":"739d2d3a-2b7a-456a-a6d6-28f231fdbf07","executionInfo":{"status":"ok","timestamp":1576016731464,"user_tz":300,"elapsed":1216,"user":{"displayName":"Hanxiang Pan","photoUrl":"","userId":"16188875245657924869"}},"colab":{"base_uri":"https://localhost:8080/","height":102}},"source":["from numpy import array\n","from numpy import asarray\n","from numpy import zeros\n","import pandas as pd\n","from keras.preprocessing.text import Tokenizer\n","from keras.preprocessing.sequence import pad_sequences\n","from keras.utils import to_categorical\n","from keras.models import Sequential\n","from keras import Model\n","from keras import optimizers\n","from keras.layers import Dense, Dropout, Flatten, Embedding, Conv1D, GlobalMaxPooling1D, Activation, LSTM, MaxPooling1D, Concatenate, Input, LeakyReLU\n","from keras.regularizers import l2\n","from nltk.corpus import stopwords\n","from nltk.tokenize import word_tokenize \n","from sklearn.model_selection import train_test_split\n","import string\n","import nltk\n","nltk.download('punkt')\n","nltk.download('stopwords')\n","\n","from google.colab import drive\n","drive.mount('/content/drive')"],"execution_count":0,"outputs":[{"output_type":"stream","text":["[nltk_data] Downloading package punkt to /root/nltk_data...\n","[nltk_data]   Package punkt is already up-to-date!\n","[nltk_data] Downloading package stopwords to /root/nltk_data...\n","[nltk_data]   Package stopwords is already up-to-date!\n","Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"5ygBUxNHU_kW","colab_type":"text"},"source":["## Parameter and Function Definition\n","Requires [GloVE Twitter Embedding 2GB](https://drive.google.com/open?id=107ukztAwLlV73eB1d4DSkxSAAS3PIWRd)"]},{"cell_type":"code","metadata":{"id":"s3eojw24U_kX","colab_type":"code","colab":{}},"source":["max_length = 500 # max length/document\n","embedding_dim = 200 # the embedding dimension\n","EMBEDDING_FILE = '/content/drive/Shared drives/CIS 520/data/glove.twitter.27B.{}d.txt'.format(embedding_dim)\n","\n","def create_view_buckets(data, num_buckets = 10):\n","    data_sorted = sorted(data.values)\n","    bucket_size = len(data_sorted) // num_buckets\n","\n","#     print(bucket_size)\n","    result = [data_sorted[0] - 1]\n","\n","    for i in range(num_buckets - 1):\n","        result.append( data_sorted[(i+1) * bucket_size] )\n","    result.append(data_sorted[-1] + 1)\n","    return result\n","\n","# Remove unnecessary tokens/characters from the field\n","def clean_fields(data, field):\n","    head = data[field]\n","\n","    # tokenize\n","    tokens = head.apply(lambda x: word_tokenize(x.lower()))\n","\n","    # remove stop words and punctuation\n","    stop_set = set(stopwords.words('english')).union(set(string.punctuation))\n","\n","    # remove the tokens that have a leading punctuation \n","    tokens = tokens.apply(lambda x: [token for token in x if token not in stop_set and token[0] not in set(string.punctuation)])\n","    return tokens"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"d3z43lykU_kZ","colab_type":"text"},"source":["## Load Data\n","Requires [pre-processed data 42MB](https://drive.google.com/open?id=1cIvDr2TUOZuVtTNCOzjQ3GrdlsEQ7Ozo)"]},{"cell_type":"code","metadata":{"id":"ct8m2hVAU_ka","colab_type":"code","outputId":"d9a8aced-7fb0-431e-e108-d624fc36b30f","executionInfo":{"status":"ok","timestamp":1575999691189,"user_tz":300,"elapsed":141577,"user":{"displayName":"Hanxiang Pan","photoUrl":"","userId":"16188875245657924869"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["# define documents\n","df = pd.read_csv('/content/drive/Shared drives/CIS 520/data/video_category.csv')\n","df = df.fillna('')\n","\n","# load the whole embedding into memory\n","embeddings_index = dict()\n","with open(EMBEDDING_FILE, 'rb') as f:    \n","    lines = f.readlines()\n","    for line in lines:\n","        values = line.split()\n","        values = [v.decode(\"utf-8\") for v in values]\n","        word = values[0]\n","        coefs = asarray(values[1:], dtype='float32')\n","        embeddings_index[word] = coefs\n","\n","print('Loaded %s word vectors.' % len(embeddings_index))"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Loaded 1193514 word vectors.\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"TLAWcxH2U_kc","colab_type":"text"},"source":["## Create Y-Variable (View Buckets)\n","- similar to our other experiment, we converted `views` into discrete bucket ranges with a total of 10 buckets\n","- The category id mapping can be found [here](https://drive.google.com/open?id=1W0Regf7zhm9EtldYr97QlHGDT-PDoA5k)"]},{"cell_type":"code","metadata":{"id":"TvuFv7jyU_kc","colab_type":"code","colab":{}},"source":["one_hot_cat = df[['1', '2', '10', '15', '17', '19','20', '22', '23','24','25', '26', '27', '28', '29', '43']]\n","\n","buckets = create_view_buckets(df['views'], num_buckets=10)\n","labels = pd.cut(df['views'], buckets, labels=False, retbins=False, include_lowest=True)"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"EjH06BxMU_ke","colab_type":"text"},"source":["## Preprocess Documents\n","- removed stop words, punctuations\n","- tokenized documents into separate tokens\n","- encode the documents into integer seqeuence encoding\n","- padded all documents to a max length of `max_length`\n","\n"]},{"cell_type":"code","metadata":{"id":"ZuCqf6PX9Iq5","colab_type":"code","outputId":"8f225bb2-26b1-4e04-ff92-51e6d06555c6","executionInfo":{"status":"ok","timestamp":1576015423953,"user_tz":300,"elapsed":54298,"user":{"displayName":"Hanxiang Pan","photoUrl":"","userId":"16188875245657924869"}},"colab":{"base_uri":"https://localhost:8080/","height":119}},"source":["# Do separate embeddings for each of the three features\n","def get_doc(data, maxlen=max_length):\n","    t = Tokenizer()\n","    t.fit_on_texts(data)\n","    vocab_size = len(t.word_index) + 1\n","    print('Tokenized')\n","\n","    # integer encode the documents\n","    encoded_docs = t.texts_to_sequences(docs)\n","    # print('encoded_docs: {}'.format(encoded_docs))\n","\n","    # pad documents to a max length of 4 words\n","    # print(max_length)\n","    padded_docs = pad_sequences(encoded_docs, maxlen=maxlen, padding='post')\n","    print(padded_docs.shape)\n","    return padded_docs, t\n","\n","desc_doc, desc_t = get_doc(clean_fields(df, 'description'), maxlen=1000)\n","title_doc, title_t = get_doc(clean_fields(df, 'title'), maxlen=500)\n","tags_doc, tags_t = get_doc(clean_fields(df, 'tags'), maxlen=200)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Tokenized\n","(34834, 1000)\n","Tokenized\n","(34834, 500)\n","Tokenized\n","(34834, 200)\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"9Pnyh8zBU_ki","colab_type":"text"},"source":["## Get Embedding Weights for Input Document\n","\n","Reference: https://github.com/keras-team/keras/blob/master/examples/pretrained_word_embeddings.py\n"]},{"cell_type":"code","metadata":{"id":"ZTwq3MovU_ki","colab_type":"code","colab":{}},"source":["# create a weight matrix for words in training docs\n","def get_embedding_matrix(t):\n","\tembedding_matrix = zeros((vocab_size, embedding_dim))\n","\tfor word, i in t.word_index.items():\n","\t\tembedding_vector = embeddings_index.get(word)\n","\t\tif embedding_vector is not None:\n","\t\t\tembedding_matrix[i] = embedding_vector\n","\treturn embedding_matrix\n","\n","title_emb = get_embedding_matrix(title_t)\n","tags_emb = get_embedding_matrix(tags_t)\n","desc_emb = get_embedding_matrix(desc_t)"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"poUCTFjcbXwC","colab_type":"text"},"source":["## Split Training/Test Set\n","- 75% train and 25% test"]},{"cell_type":"code","metadata":{"id":"BPFhExFdbV98","colab_type":"code","colab":{}},"source":["X_train_desc, X_test_desc, y_train, y_test = train_test_split(desc_doc, labels, random_state = 0, shuffle=True)\n","X_train_title, X_test_title, y_train, y_test = train_test_split(title_doc, labels, random_state = 0, shuffle=True)\n","X_train_tags, X_test_tags, y_train, y_test = train_test_split(tags_doc, labels, random_state = 0, shuffle=True)\n","X_train_clickbait, X_test_clickbait, y_train, y_test = train_test_split(df['clickbait_rate'].values, labels, random_state = 0, shuffle=True)\n","\n","one_hot_train, one_hot_test, y_train, y_test = train_test_split(one_hot_cat, labels, random_state = 0, shuffle=True)\n","\n","# Convert buckets into 1-hot\n","y_train = to_categorical(y_train, num_classes=None)\n","y_test = to_categorical(y_test, num_classes=None)"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"eRFDyvI9U_kk","colab_type":"text"},"source":["## Define Model (Neural Network)"]},{"cell_type":"markdown","metadata":{"id":"Y9VAxdKXU_kl","colab_type":"text"},"source":["### Factors considered\n","- Whether to make the embedding layer weights trainable (since the pre-trained embedding is not the same domain as our problem, it might make sense to use the weights as a starting point and trained it ourselves)\n","- the neural network architecture\n","- Hyperparameters\n","    - max length/document\n","    - Conv1D filter/kernel_size/strides\n","    - Learning rate\n","- loss function (cross-entropy, KL divergence)\n","- optimizer (currently adam)\n","- other form of metrics to measure \"model performance\" (currently accuracy)\n"]},{"cell_type":"code","metadata":{"id":"2xksahWiU_kl","colab_type":"code","colab":{}},"source":["# Define input variables\n","one_hot_cat_variable = Input(shape=(one_hot_cat.shape[1],), name='one_hot_category')\n","title_doc_variable = Input(shape=(title_doc.shape[1],), name='title')\n","tags_doc_variable = Input(shape=(tags_doc.shape[1],), name='tags')\n","desc_doc_variable = Input(shape=(desc_doc.shape[1],), name='description')\n","clickbait_variable = Input(shape=(1,), name='clickbait')\n","\n","# Define Layers\n","def max_pool_out(var, embedding_matrix, kernel_size=5, strides=1, name=None, input_length=max_length):\n","    embed_out = Embedding(vocab_size, \n","                            embedding_dim, \n","                            weights=[embedding_matrix], \n","                            input_length=input_length, \n","                            trainable=True,\n","                            name=name + '_embedding'\n","                            )(var)\n","\n","    conv_out_1 = Conv1D(filters=embedding_dim,\n","                        kernel_size=kernel_size,\n","                        padding='valid',\n","                        activation='relu',\n","                        strides=strides,\n","                        name=name + '_conv'\n","                        )(embed_out)\n","\n","    max_pool_out_1 = GlobalMaxPooling1D(name=name+ \"_max_pool\")(conv_out_1)\n","    return max_pool_out_1\n","\n","title_max_pool_out = max_pool_out(title_doc_variable, title_emb, name='title', input_length=500)\n","desc_max_pool_out = max_pool_out(desc_doc_variable, desc_emb, kernel_size=8, strides=1, name='description', input_length=1000)\n","tags_max_pool_out = max_pool_out(tags_doc_variable, tags_emb, kernel_size=1, strides=1, name='tags', input_length=200)\n","\n","concat_out = Concatenate()([title_max_pool_out, desc_max_pool_out, tags_max_pool_out, one_hot_cat_variable, clickbait_variable])\n","dense_out_1 = Dense(embedding_dim, activation='relu')(concat_out)\n","dropout_out = Dropout(rate=0.2)(dense_out_1)\n","dense_out_2 = Dense(embedding_dim, activation='relu')(dropout_out)\n","\n","dense_out_3 = Dense(10, activation='softmax')(dense_out_2)\n","model = Model(inputs=[title_doc_variable, desc_doc_variable, tags_doc_variable, one_hot_cat_variable, clickbait_variable], outputs=dense_out_3)"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"ONnI2Kw1U_kn","colab_type":"text"},"source":["## Compile Model"]},{"cell_type":"code","metadata":{"id":"muqsKMBoU_kn","colab_type":"code","outputId":"1a4e990e-3418-455a-dba9-0e5acf45ddf9","executionInfo":{"status":"ok","timestamp":1576028597749,"user_tz":300,"elapsed":1075,"user":{"displayName":"Hanxiang Pan","photoUrl":"","userId":"16188875245657924869"}},"colab":{"base_uri":"https://localhost:8080/","height":884}},"source":["# compile the model\n","adam = optimizers.Adam(clipnorm=1.)\n","model.compile(optimizer=adam, loss='categorical_crossentropy', metrics=['accuracy'])\n","\n","# summarize the model\n","print(model.summary())"],"execution_count":149,"outputs":[{"output_type":"stream","text":["Model: \"model_38\"\n","__________________________________________________________________________________________________\n","Layer (type)                    Output Shape         Param #     Connected to                     \n","==================================================================================================\n","title (InputLayer)              (None, 500)          0                                            \n","__________________________________________________________________________________________________\n","description (InputLayer)        (None, 1000)         0                                            \n","__________________________________________________________________________________________________\n","tags (InputLayer)               (None, 200)          0                                            \n","__________________________________________________________________________________________________\n","title_embedding (Embedding)     (None, 500, 200)     9776600     title[0][0]                      \n","__________________________________________________________________________________________________\n","description_embedding (Embeddin (None, 1000, 200)    9776600     description[0][0]                \n","__________________________________________________________________________________________________\n","tags_embedding (Embedding)      (None, 200, 200)     9776600     tags[0][0]                       \n","__________________________________________________________________________________________________\n","title_conv (Conv1D)             (None, 496, 200)     200200      title_embedding[0][0]            \n","__________________________________________________________________________________________________\n","description_conv (Conv1D)       (None, 993, 200)     320200      description_embedding[0][0]      \n","__________________________________________________________________________________________________\n","tags_conv (Conv1D)              (None, 200, 200)     40200       tags_embedding[0][0]             \n","__________________________________________________________________________________________________\n","title_max_pool (GlobalMaxPoolin (None, 200)          0           title_conv[0][0]                 \n","__________________________________________________________________________________________________\n","description_max_pool (GlobalMax (None, 200)          0           description_conv[0][0]           \n","__________________________________________________________________________________________________\n","tags_max_pool (GlobalMaxPooling (None, 200)          0           tags_conv[0][0]                  \n","__________________________________________________________________________________________________\n","one_hot_category (InputLayer)   (None, 16)           0                                            \n","__________________________________________________________________________________________________\n","clickbait (InputLayer)          (None, 1)            0                                            \n","__________________________________________________________________________________________________\n","concatenate_40 (Concatenate)    (None, 617)          0           title_max_pool[0][0]             \n","                                                                 description_max_pool[0][0]       \n","                                                                 tags_max_pool[0][0]              \n","                                                                 one_hot_category[0][0]           \n","                                                                 clickbait[0][0]                  \n","__________________________________________________________________________________________________\n","dense_109 (Dense)               (None, 200)          123600      concatenate_40[0][0]             \n","__________________________________________________________________________________________________\n","dropout_37 (Dropout)            (None, 200)          0           dense_109[0][0]                  \n","__________________________________________________________________________________________________\n","dense_110 (Dense)               (None, 200)          40200       dropout_37[0][0]                 \n","__________________________________________________________________________________________________\n","dense_111 (Dense)               (None, 10)           2010        dense_110[0][0]                  \n","==================================================================================================\n","Total params: 30,056,210\n","Trainable params: 30,056,210\n","Non-trainable params: 0\n","__________________________________________________________________________________________________\n","None\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"FoPPCO7DU_kp","colab_type":"text"},"source":["## Train and Evaluate Model"]},{"cell_type":"code","metadata":{"id":"80xJjrMiU_kq","colab_type":"code","outputId":"34a24c39-f63d-4606-f4f1-b01cf7ce13e9","executionInfo":{"status":"ok","timestamp":1576031680060,"user_tz":300,"elapsed":1844986,"user":{"displayName":"Hanxiang Pan","photoUrl":"","userId":"16188875245657924869"}},"colab":{"base_uri":"https://localhost:8080/","height":1000}},"source":["# fit the model\n","model.fit([X_train_title, X_train_desc, X_train_tags, one_hot_train, X_train_clickbait], y_train, epochs=100, verbose=2)\n","\n","# evaluate the model\n","# loss, accuracy = model.evaluate([X_test, one_hot_test], y_test, verbose=2)\n","loss, accuracy = model.evaluate([X_test_title, X_test_desc, X_test_tags, one_hot_test, X_test_clickbait], y_test, verbose=2)\n","print('Accuracy: %f' % (accuracy*100))"],"execution_count":150,"outputs":[{"output_type":"stream","text":["Epoch 1/100\n"," - 38s - loss: 1.6617 - acc: 0.3874\n","Epoch 2/100\n"," - 31s - loss: 1.1122 - acc: 0.5967\n","Epoch 3/100\n"," - 32s - loss: 0.9646 - acc: 0.6546\n","Epoch 4/100\n"," - 32s - loss: 0.8870 - acc: 0.6809\n","Epoch 5/100\n"," - 32s - loss: 0.8429 - acc: 0.6893\n","Epoch 6/100\n"," - 32s - loss: 0.8043 - acc: 0.7016\n","Epoch 7/100\n"," - 32s - loss: 0.7761 - acc: 0.7070\n","Epoch 8/100\n"," - 32s - loss: 0.7639 - acc: 0.7102\n","Epoch 9/100\n"," - 32s - loss: 0.7481 - acc: 0.7135\n","Epoch 10/100\n"," - 32s - loss: 0.7307 - acc: 0.7174\n","Epoch 11/100\n"," - 32s - loss: 0.7217 - acc: 0.7182\n","Epoch 12/100\n"," - 31s - loss: 0.7100 - acc: 0.7229\n","Epoch 13/100\n"," - 32s - loss: 0.6973 - acc: 0.7262\n","Epoch 14/100\n"," - 32s - loss: 0.6848 - acc: 0.7294\n","Epoch 15/100\n"," - 32s - loss: 0.6771 - acc: 0.7316\n","Epoch 16/100\n"," - 32s - loss: 0.6705 - acc: 0.7300\n","Epoch 17/100\n"," - 32s - loss: 0.6589 - acc: 0.7341\n","Epoch 18/100\n"," - 32s - loss: 0.6596 - acc: 0.7319\n","Epoch 19/100\n"," - 32s - loss: 0.6507 - acc: 0.7347\n","Epoch 20/100\n"," - 32s - loss: 0.6491 - acc: 0.7335\n","Epoch 21/100\n"," - 32s - loss: 0.6382 - acc: 0.7386\n","Epoch 22/100\n"," - 32s - loss: 0.6360 - acc: 0.7410\n","Epoch 23/100\n"," - 32s - loss: 0.6402 - acc: 0.7396\n","Epoch 24/100\n"," - 32s - loss: 0.6281 - acc: 0.7405\n","Epoch 25/100\n"," - 31s - loss: 0.6238 - acc: 0.7396\n","Epoch 26/100\n"," - 31s - loss: 0.6226 - acc: 0.7419\n","Epoch 27/100\n"," - 31s - loss: 0.6255 - acc: 0.7409\n","Epoch 28/100\n"," - 32s - loss: 0.6174 - acc: 0.7441\n","Epoch 29/100\n"," - 31s - loss: 0.6174 - acc: 0.7432\n","Epoch 30/100\n"," - 31s - loss: 0.6134 - acc: 0.7437\n","Epoch 31/100\n"," - 31s - loss: 0.6124 - acc: 0.7422\n","Epoch 32/100\n"," - 32s - loss: 0.6058 - acc: 0.7459\n","Epoch 33/100\n"," - 32s - loss: 0.6061 - acc: 0.7467\n","Epoch 34/100\n"," - 32s - loss: 0.6024 - acc: 0.7467\n","Epoch 35/100\n"," - 31s - loss: 0.6019 - acc: 0.7472\n","Epoch 36/100\n"," - 32s - loss: 0.6034 - acc: 0.7482\n","Epoch 37/100\n"," - 32s - loss: 0.6029 - acc: 0.7457\n","Epoch 38/100\n"," - 31s - loss: 0.6016 - acc: 0.7476\n","Epoch 39/100\n"," - 32s - loss: 0.5981 - acc: 0.7492\n","Epoch 40/100\n"," - 31s - loss: 0.5921 - acc: 0.7504\n","Epoch 41/100\n"," - 31s - loss: 0.5908 - acc: 0.7488\n","Epoch 42/100\n"," - 31s - loss: 0.5926 - acc: 0.7470\n","Epoch 43/100\n"," - 32s - loss: 0.5980 - acc: 0.7464\n","Epoch 44/100\n"," - 32s - loss: 0.5917 - acc: 0.7511\n","Epoch 45/100\n"," - 31s - loss: 0.5927 - acc: 0.7525\n","Epoch 46/100\n"," - 32s - loss: 0.5920 - acc: 0.7512\n","Epoch 47/100\n"," - 31s - loss: 0.5891 - acc: 0.7540\n","Epoch 48/100\n"," - 31s - loss: 0.5906 - acc: 0.7492\n","Epoch 49/100\n"," - 32s - loss: 0.5857 - acc: 0.7505\n","Epoch 50/100\n"," - 31s - loss: 0.5868 - acc: 0.7539\n","Epoch 51/100\n"," - 30s - loss: 0.5896 - acc: 0.7520\n","Epoch 52/100\n"," - 30s - loss: 0.5850 - acc: 0.7529\n","Epoch 53/100\n"," - 30s - loss: 0.5799 - acc: 0.7536\n","Epoch 54/100\n"," - 30s - loss: 0.5782 - acc: 0.7551\n","Epoch 55/100\n"," - 30s - loss: 0.5812 - acc: 0.7522\n","Epoch 56/100\n"," - 30s - loss: 0.5816 - acc: 0.7533\n","Epoch 57/100\n"," - 30s - loss: 0.5769 - acc: 0.7524\n","Epoch 58/100\n"," - 30s - loss: 0.5777 - acc: 0.7561\n","Epoch 59/100\n"," - 30s - loss: 0.5760 - acc: 0.7538\n","Epoch 60/100\n"," - 30s - loss: 0.5791 - acc: 0.7522\n","Epoch 61/100\n"," - 30s - loss: 0.5823 - acc: 0.7538\n","Epoch 62/100\n"," - 30s - loss: 0.5823 - acc: 0.7543\n","Epoch 63/100\n"," - 30s - loss: 0.5785 - acc: 0.7553\n","Epoch 64/100\n"," - 30s - loss: 0.5742 - acc: 0.7540\n","Epoch 65/100\n"," - 30s - loss: 0.5775 - acc: 0.7529\n","Epoch 66/100\n"," - 30s - loss: 0.5768 - acc: 0.7573\n","Epoch 67/100\n"," - 30s - loss: 0.5766 - acc: 0.7559\n","Epoch 68/100\n"," - 30s - loss: 0.5785 - acc: 0.7553\n","Epoch 69/100\n"," - 30s - loss: 0.5766 - acc: 0.7567\n","Epoch 70/100\n"," - 30s - loss: 0.5773 - acc: 0.7574\n","Epoch 71/100\n"," - 30s - loss: 0.5731 - acc: 0.7564\n","Epoch 72/100\n"," - 30s - loss: 0.5661 - acc: 0.7574\n","Epoch 73/100\n"," - 30s - loss: 0.5728 - acc: 0.7558\n","Epoch 74/100\n"," - 30s - loss: 0.5736 - acc: 0.7598\n","Epoch 75/100\n"," - 30s - loss: 0.5802 - acc: 0.7560\n","Epoch 76/100\n"," - 30s - loss: 0.5735 - acc: 0.7572\n","Epoch 77/100\n"," - 30s - loss: 0.5704 - acc: 0.7583\n","Epoch 78/100\n"," - 30s - loss: 0.5712 - acc: 0.7569\n","Epoch 79/100\n"," - 30s - loss: 0.5722 - acc: 0.7577\n","Epoch 80/100\n"," - 30s - loss: 0.5698 - acc: 0.7583\n","Epoch 81/100\n"," - 30s - loss: 0.5724 - acc: 0.7576\n","Epoch 82/100\n"," - 30s - loss: 0.5672 - acc: 0.7568\n","Epoch 83/100\n"," - 30s - loss: 0.5743 - acc: 0.7585\n","Epoch 84/100\n"," - 30s - loss: 0.5716 - acc: 0.7580\n","Epoch 85/100\n"," - 30s - loss: 0.5687 - acc: 0.7586\n","Epoch 86/100\n"," - 30s - loss: 0.5687 - acc: 0.7582\n","Epoch 87/100\n"," - 30s - loss: 0.5664 - acc: 0.7584\n","Epoch 88/100\n"," - 30s - loss: 0.5665 - acc: 0.7571\n","Epoch 89/100\n"," - 30s - loss: 0.5666 - acc: 0.7589\n","Epoch 90/100\n"," - 30s - loss: 0.5733 - acc: 0.7593\n","Epoch 91/100\n"," - 30s - loss: 0.5724 - acc: 0.7608\n","Epoch 92/100\n"," - 30s - loss: 0.5741 - acc: 0.7585\n","Epoch 93/100\n"," - 30s - loss: 0.5715 - acc: 0.7548\n","Epoch 94/100\n"," - 30s - loss: 0.5711 - acc: 0.7590\n","Epoch 95/100\n"," - 30s - loss: 0.5685 - acc: 0.7588\n","Epoch 96/100\n"," - 30s - loss: 0.5704 - acc: 0.7576\n","Epoch 97/100\n"," - 30s - loss: 0.5709 - acc: 0.7566\n","Epoch 98/100\n"," - 30s - loss: 0.5698 - acc: 0.7582\n","Epoch 99/100\n"," - 30s - loss: 0.5811 - acc: 0.7565\n","Epoch 100/100\n"," - 30s - loss: 0.5742 - acc: 0.7572\n","Accuracy: 68.044552\n"],"name":"stdout"}]}]}