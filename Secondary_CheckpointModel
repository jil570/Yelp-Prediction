{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"SecondaryModel_Checkpoint","provenance":[],"collapsed_sections":["fwNVBFZGKb1G"]},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"cell_type":"markdown","metadata":{"id":"7654moUtnL6Y","colab_type":"text"},"source":["## Secondary Model that is used for producing checkpoint results (Experiment 1-3)"]},{"cell_type":"code","metadata":{"id":"Hxpk1WeB2wY7","colab_type":"code","outputId":"9c922957-e971-418c-f496-f3e379d8a8d4","executionInfo":{"status":"ok","timestamp":1576021888260,"user_tz":300,"elapsed":2073,"user":{"displayName":"Hanxiang Pan","photoUrl":"","userId":"16188875245657924869"}},"colab":{"base_uri":"https://localhost:8080/","height":101}},"source":["import pandas as pd\n","from pandas import Timedelta\n","import numpy as np\n","import json\n","import string\n","from sklearn import svm\n","from sklearn.linear_model import LinearRegression, LogisticRegression, SGDClassifier, RidgeClassifier\n","from sklearn.naive_bayes import MultinomialNB\n","from sklearn.neural_network import MLPClassifier\n","from sklearn.model_selection import train_test_split\n","from sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier\n","from sklearn.feature_extraction.text import CountVectorizer, TfidfTransformer\n","from sklearn.decomposition import PCA, TruncatedSVD\n","from sklearn.metrics import accuracy_score\n","\n","import matplotlib as mpl\n","import matplotlib.pyplot as plt\n","import nltk\n","\n","from nltk.corpus import stopwords\n","from nltk.tokenize import word_tokenize \n","nltk.download('stopwords')\n","nltk.download('punkt')"],"execution_count":0,"outputs":[{"output_type":"stream","text":["[nltk_data] Downloading package stopwords to /root/nltk_data...\n","[nltk_data]   Unzipping corpora/stopwords.zip.\n","[nltk_data] Downloading package punkt to /root/nltk_data...\n","[nltk_data]   Unzipping tokenizers/punkt.zip.\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["True"]},"metadata":{"tags":[]},"execution_count":1}]},{"cell_type":"markdown","metadata":{"id":"HH0nCqh0Glk7","colab_type":"text"},"source":["## Load Data"]},{"cell_type":"code","metadata":{"id":"xDL3e77FGhrd","colab_type":"code","outputId":"c4b03d91-2a2d-4491-8e42-76c50886c855","executionInfo":{"status":"ok","timestamp":1576021916051,"user_tz":300,"elapsed":21721,"user":{"displayName":"Hanxiang Pan","photoUrl":"","userId":"16188875245657924869"}},"colab":{"base_uri":"https://localhost:8080/","height":121}},"source":["from google.colab import drive\n","drive.mount('/content/drive')\n","\n","\n","df = pd.read_csv('/content/drive/Shared drives/CIS 520/data/video_category.csv')\n","df = df.fillna('')\n","\n","with open('/content/drive/Shared drives/CIS 520/data/word_bank.json') as f:\n","  word_bank = json.load(f)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Go to this URL in a browser: https://accounts.google.com/o/oauth2/auth?client_id=947318989803-6bn6qk8qdgf4n4g3pfee6491hc0brc4i.apps.googleusercontent.com&redirect_uri=urn%3aietf%3awg%3aoauth%3a2.0%3aoob&response_type=code&scope=email%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdocs.test%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdrive%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdrive.photos.readonly%20https%3a%2f%2fwww.googleapis.com%2fauth%2fpeopleapi.readonly\n","\n","Enter your authorization code:\n","··········\n","Mounted at /content/drive\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"qGcGQ8kaDwiW","colab_type":"text"},"source":["## Data Preprocessing"]},{"cell_type":"markdown","metadata":{"id":"fwNVBFZGKb1G","colab_type":"text"},"source":["### Function Definition"]},{"cell_type":"code","metadata":{"id":"GvI50UtPxJ7e","colab_type":"code","colab":{}},"source":["# Description Tokenization\n","def tokenize_clean_field(data, field):\n","    \"\"\"\n","    Tokenizes the document string and removes stop words, punctuation, and tokens that\n","    have leading punctuations\n","    Parameters:\n","        data - the orginal document {Pandas.DataFrame}\n","        field - the field in the document that we want to tokenize and clean\n","    Returns:\n","        cleaned tokens for that particular field in the document\n","    \"\"\"\n","    head = data[field]\n","\n","    # tokenize\n","    tokens = head.apply(lambda x: word_tokenize(x.lower()))\n","\n","    # remove stop words and punctuation\n","    stop_set = set(stopwords.words('english')).union(set(string.punctuation))\n","\n","    # remove the tokens that have a leading punctuation \n","    tokens = tokens.apply(lambda x: [token for token in x if token not in stop_set and token[0] not in set(string.punctuation)])\n","    return tokens\n","\n","def match_word_bank(wb, tokens):\n","    \"\"\"\n","    For a given document, augment additional categories based on the tokens in the document and\n","    the tokens in the word bank.\n","    Parameters:\n","        wb - Word bank (format: {categoryId: [tokens] } )\n","        tokens - the list of tokens for the given document\n","    Returns:\n","        the matched list of categories for the given document\n","    \"\"\"\n","    freq = {} # { documentId (row): frequency(list[freq for cat1, freq for cat2... ])}\n","    keys = wb.keys()\n","\n","    for i in range(len(tokens)):\n","        freq[i] = []\n","\n","        if len(tokens[i]) > 0:\n","            for cat in keys:\n","                count = 0\n","                for token in tokens[i]:\n","                    if token in wb[cat]:\n","                        count += 1\n","                    freq[i].append(count / len(tokens[i]))\n","            else:\n","                freq[i].append(-1)\n","    result = []\n","    for key in freq.keys():\n","        max_idx = np.argmax(freq[key])\n","        final_cat = list(keys)[max_idx]\n","        result.append(final_cat)\n","\n","    return result\n","\n","def create_view_buckets(data, num_buckets = 10):\n","    \"\"\"\n","    Create view buckets, ensuring that each bucket has the same number of samples\n","    Parameters:\n","        data - the raw view counts\n","        num_buckets - the number of buckets to generate\n","    Returns:\n","        list of bucket ranges, this will be input to the pandas.cut() function\n","    \"\"\"\n","    data_sorted = sorted(data.values)\n","    bucket_size = len(data_sorted) // num_buckets\n","\n","    result = [data_sorted[0] - 1]\n","\n","    for i in range(num_buckets - 1):\n","        result.append( data_sorted[(i+1) * bucket_size] )\n","    result.append(data_sorted[-1] + 1)\n","    return result\n","\n","def transform(data):\n","    \"\"\"\n","    Transforms raw text data of the three fields \"tags\", \"title\" and \"description\"\n","    into count vector indexes. This will be used as input for TF-IDF\n","    Parameters:\n","        data - the Pandas.DataFrame containing the data for the three fields\n","    Returns:\n","        temp - transformed text data\n","        count_vect - count vector instance\n","\n","    \"\"\"\n","    transformed_data = pd.DataFrame()\n","    count_vect = CountVectorizer()\n","    data['merged'] = data['tags'] + data['title'] + data['description']\n","    t = [' '.join(k) for k in data['merged'].values]\n","    transformed_data = count_vect.fit_transform(t)    \n","    return transformed_data, count_vect"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"N2ISAM15Kfl2","colab_type":"text"},"source":["### Prepare Training Data"]},{"cell_type":"code","metadata":{"id":"MLYotxjb3IHG","colab_type":"code","outputId":"b12f422c-9f66-4bcc-c903-2c494d146b1c","executionInfo":{"status":"ok","timestamp":1576022035727,"user_tz":300,"elapsed":43273,"user":{"displayName":"Hanxiang Pan","photoUrl":"","userId":"16188875245657924869"}},"colab":{"base_uri":"https://localhost:8080/","height":218}},"source":["X = pd.DataFrame()\n","# X = df[['title', 'tags', 'description', 'clickbait_rate', 'videos', 'followers', \n","#         '1'\t,'2', '10', '15',\t'17', '19',\t'20', '22', '23',\t'24',\t'25', '26', '27', '28', '29',\t'43']]\n","X['title'] = tokenize_clean_field(df, 'title')\n","X['tags'] = tokenize_clean_field(df, 'tags')\n","X['description'] = tokenize_clean_field(df, 'description')\n","y = df['views']\n","\n","buckets = create_view_buckets(y)\n","print('Bucket ranges: {}'.format(buckets))\n","\n","buckets_index = pd.cut(y, buckets, labels=False, retbins=False, include_lowest=True)\n","print('Bucket index samples: {}'.format(buckets_index[:10]))"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Bucket ranges: [548, 95486, 211793, 332002, 495257, 718074, 1029141, 1485264, 2326590, 4492756, 225211924]\n","Bucket index samples: 0    5\n","1    8\n","2    8\n","3    3\n","4    7\n","5    1\n","6    7\n","7    5\n","8    5\n","9    2\n","Name: views, dtype: int64\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"bZ22wZ6AK6XS","colab_type":"text"},"source":["### Counter Vector and TF-IDF Transformation"]},{"cell_type":"code","metadata":{"id":"Ffnwcn346uuv","colab_type":"code","colab":{}},"source":["X_ = X.copy()\n","y_ = buckets_index\n","\n","X_transformed, count_vect_train = transform(X_)\n","\n","tfidf_transformer = TfidfTransformer()\n","X_tfidf = tfidf_transformer.fit_transform(X_transformed)"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"_e-qpa9zK_rg","colab_type":"text"},"source":["### PCA on TF-IDF Features"]},{"cell_type":"code","metadata":{"id":"EmEB7J-9DYDU","colab_type":"code","outputId":"65974c83-0671-415c-8208-4d86a5b872e5","executionInfo":{"status":"ok","timestamp":1576022241111,"user_tz":300,"elapsed":174531,"user":{"displayName":"Hanxiang Pan","photoUrl":"","userId":"16188875245657924869"}},"colab":{"base_uri":"https://localhost:8080/","height":265}},"source":["t_pca = TruncatedSVD(1800)\n","t_pca.fit(X_tfidf)\n","\n","running_total = 0\n","plot_data = []\n","for data in t_pca.explained_variance_ratio_:\n","  running_total += data\n","  plot_data.append(running_total)\n","\n","plt.plot(plot_data)\n","plt.show()\n","\n","# Transform the input data into the reduced dimension space\n","X_transformed_pca = t_pca.transform(X_tfidf)"],"execution_count":0,"outputs":[{"output_type":"display_data","data":{"image/png":"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\nEYkS/wM+YsYe1WBo7QAAAABJRU5ErkJggg==\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"markdown","metadata":{"id":"UkvLch5ZLFNA","colab_type":"text"},"source":["### Split data into training/testing set"]},{"cell_type":"code","metadata":{"id":"bxEbssGA3oFP","colab_type":"code","colab":{}},"source":["X_merged = pd.DataFrame(X_transformed_pca)\n","X_merged = df[['clickbait_rate', '1' ,'2', '10', '15', '17', '19', '20', '22', '23', '24', '25', '26', '27', '28', '29', '43']].join(X_merged)\n","X_train, X_test, Y_train, Y_test = train_test_split(X_merged.values, y_, random_state = 0, shuffle=True)"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"rybtTWYNLJk5","colab_type":"text"},"source":["## Model Training"]},{"cell_type":"code","metadata":{"id":"WaD2kJcJK5Ig","colab_type":"code","outputId":"595d2008-ee7b-4760-9d1d-ee3e4381758d","executionInfo":{"status":"ok","timestamp":1576022961717,"user_tz":300,"elapsed":487395,"user":{"displayName":"Hanxiang Pan","photoUrl":"","userId":"16188875245657924869"}},"colab":{"base_uri":"https://localhost:8080/","height":1000}},"source":["result_df = pd.DataFrame() # The dataframe for holding the results\n","\n","clf_mlp = MLPClassifier(max_iter=500, verbose=True).fit(X_train, Y_train)\n","y_pred2 = clf_mlp.predict(X_test)\n","score_mlp = accuracy_score(y_pred2, Y_test)\n","print('MLP: {}'.format(score_mlp))\n","result_df = result_df.append([[\"MLP\", score]])\n","\n","# With followers + videos posted by channel (actual numbers) | 0.09564818004363303"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Iteration 1, loss = 2.19748495\n","Iteration 2, loss = 1.80501523\n","Iteration 3, loss = 1.43151180\n","Iteration 4, loss = 1.23269307\n","Iteration 5, loss = 1.13053176\n","Iteration 6, loss = 1.06816404\n","Iteration 7, loss = 1.02603830\n","Iteration 8, loss = 0.99327649\n","Iteration 9, loss = 0.96867089\n","Iteration 10, loss = 0.94516063\n","Iteration 11, loss = 0.92803997\n","Iteration 12, loss = 0.91033542\n","Iteration 13, loss = 0.89712286\n","Iteration 14, loss = 0.88256971\n","Iteration 15, loss = 0.87111836\n","Iteration 16, loss = 0.86005110\n","Iteration 17, loss = 0.85015407\n","Iteration 18, loss = 0.84030051\n","Iteration 19, loss = 0.83074106\n","Iteration 20, loss = 0.82301768\n","Iteration 21, loss = 0.81534440\n","Iteration 22, loss = 0.80810131\n","Iteration 23, loss = 0.80070969\n","Iteration 24, loss = 0.79511231\n","Iteration 25, loss = 0.78816410\n","Iteration 26, loss = 0.78182069\n","Iteration 27, loss = 0.77555690\n","Iteration 28, loss = 0.77137405\n","Iteration 29, loss = 0.76513588\n","Iteration 30, loss = 0.76095511\n","Iteration 31, loss = 0.75620570\n","Iteration 32, loss = 0.75085509\n","Iteration 33, loss = 0.74712191\n","Iteration 34, loss = 0.74273940\n","Iteration 35, loss = 0.73895187\n","Iteration 36, loss = 0.73570389\n","Iteration 37, loss = 0.73076678\n","Iteration 38, loss = 0.72727778\n","Iteration 39, loss = 0.72277742\n","Iteration 40, loss = 0.72052478\n","Iteration 41, loss = 0.71673227\n","Iteration 42, loss = 0.71369880\n","Iteration 43, loss = 0.71201087\n","Iteration 44, loss = 0.70910990\n","Iteration 45, loss = 0.70454060\n","Iteration 46, loss = 0.70358776\n","Iteration 47, loss = 0.69967377\n","Iteration 48, loss = 0.69761246\n","Iteration 49, loss = 0.69472734\n","Iteration 50, loss = 0.69160276\n","Iteration 51, loss = 0.69037279\n","Iteration 52, loss = 0.68740909\n","Iteration 53, loss = 0.68667760\n","Iteration 54, loss = 0.68449437\n","Iteration 55, loss = 0.68163398\n","Iteration 56, loss = 0.67941380\n","Iteration 57, loss = 0.67739532\n","Iteration 58, loss = 0.67569882\n","Iteration 59, loss = 0.67428712\n","Iteration 60, loss = 0.67276333\n","Iteration 61, loss = 0.66995901\n","Iteration 62, loss = 0.66918325\n","Iteration 63, loss = 0.66731905\n","Iteration 64, loss = 0.66557885\n","Iteration 65, loss = 0.66358798\n","Iteration 66, loss = 0.66326333\n","Iteration 67, loss = 0.66013647\n","Iteration 68, loss = 0.65942387\n","Iteration 69, loss = 0.65777594\n","Iteration 70, loss = 0.65577053\n","Iteration 71, loss = 0.65531095\n","Iteration 72, loss = 0.65415284\n","Iteration 73, loss = 0.65328199\n","Iteration 74, loss = 0.65119366\n","Iteration 75, loss = 0.65133008\n","Iteration 76, loss = 0.64880418\n","Iteration 77, loss = 0.64798097\n","Iteration 78, loss = 0.64734763\n","Iteration 79, loss = 0.64650575\n","Iteration 80, loss = 0.64449399\n","Iteration 81, loss = 0.64404420\n","Iteration 82, loss = 0.64276691\n","Iteration 83, loss = 0.64170843\n","Iteration 84, loss = 0.64129090\n","Iteration 85, loss = 0.63942763\n","Iteration 86, loss = 0.64012268\n","Iteration 87, loss = 0.63836506\n","Iteration 88, loss = 0.63749100\n","Iteration 89, loss = 0.63676640\n","Iteration 90, loss = 0.63636561\n","Iteration 91, loss = 0.63558722\n","Iteration 92, loss = 0.63337104\n","Iteration 93, loss = 0.63422992\n","Iteration 94, loss = 0.63240421\n","Iteration 95, loss = 0.63111393\n","Iteration 96, loss = 0.63027540\n","Iteration 97, loss = 0.63002757\n","Iteration 98, loss = 0.62892713\n","Iteration 99, loss = 0.62816301\n","Iteration 100, loss = 0.62807087\n","Iteration 101, loss = 0.62790833\n","Iteration 102, loss = 0.62664565\n","Iteration 103, loss = 0.62699169\n","Iteration 104, loss = 0.62543819\n","Iteration 105, loss = 0.62446189\n","Iteration 106, loss = 0.62410419\n","Iteration 107, loss = 0.62370838\n","Iteration 108, loss = 0.62339698\n","Iteration 109, loss = 0.62291588\n","Iteration 110, loss = 0.62133022\n","Iteration 111, loss = 0.62017190\n","Iteration 112, loss = 0.62029647\n","Iteration 113, loss = 0.61976826\n","Iteration 114, loss = 0.61928137\n","Iteration 115, loss = 0.61955492\n","Iteration 116, loss = 0.61979378\n","Iteration 117, loss = 0.61835214\n","Iteration 118, loss = 0.61680526\n","Iteration 119, loss = 0.61648344\n","Iteration 120, loss = 0.61591538\n","Iteration 121, loss = 0.61531409\n","Iteration 122, loss = 0.61599361\n","Iteration 123, loss = 0.61459218\n","Iteration 124, loss = 0.61323567\n","Iteration 125, loss = 0.61395320\n","Iteration 126, loss = 0.61400273\n","Iteration 127, loss = 0.61373685\n","Iteration 128, loss = 0.61301820\n","Iteration 129, loss = 0.61140936\n","Iteration 130, loss = 0.61283499\n","Iteration 131, loss = 0.61172175\n","Iteration 132, loss = 0.61070294\n","Iteration 133, loss = 0.61112076\n","Iteration 134, loss = 0.60971266\n","Iteration 135, loss = 0.60882078\n","Iteration 136, loss = 0.60896715\n","Iteration 137, loss = 0.60912605\n","Iteration 138, loss = 0.60873806\n","Iteration 139, loss = 0.60854795\n","Iteration 140, loss = 0.60742178\n","Iteration 141, loss = 0.60747591\n","Iteration 142, loss = 0.60763889\n","Iteration 143, loss = 0.60615754\n","Iteration 144, loss = 0.60576762\n","Iteration 145, loss = 0.60606024\n","Iteration 146, loss = 0.60627043\n","Iteration 147, loss = 0.60511426\n","Iteration 148, loss = 0.60546968\n","Iteration 149, loss = 0.60397290\n","Iteration 150, loss = 0.60454034\n","Iteration 151, loss = 0.60575740\n","Iteration 152, loss = 0.60362569\n","Iteration 153, loss = 0.60346901\n","Iteration 154, loss = 0.60384462\n","Iteration 155, loss = 0.60316375\n","Iteration 156, loss = 0.60329088\n","Iteration 157, loss = 0.60249623\n","Iteration 158, loss = 0.60366588\n","Iteration 159, loss = 0.60236904\n","Iteration 160, loss = 0.60143288\n","Iteration 161, loss = 0.60097965\n","Iteration 162, loss = 0.59991863\n","Iteration 163, loss = 0.60118939\n","Iteration 164, loss = 0.60211885\n","Iteration 165, loss = 0.60113339\n","Iteration 166, loss = 0.60005012\n","Iteration 167, loss = 0.59986320\n","Iteration 168, loss = 0.59822044\n","Iteration 169, loss = 0.59957891\n","Iteration 170, loss = 0.59983323\n","Iteration 171, loss = 0.59860042\n","Iteration 172, loss = 0.59902031\n","Iteration 173, loss = 0.59837412\n","Iteration 174, loss = 0.59837512\n","Iteration 175, loss = 0.59769637\n","Iteration 176, loss = 0.59872463\n","Iteration 177, loss = 0.59683741\n","Iteration 178, loss = 0.59700441\n","Iteration 179, loss = 0.59631974\n","Iteration 180, loss = 0.59685124\n","Iteration 181, loss = 0.59660247\n","Iteration 182, loss = 0.59692846\n","Iteration 183, loss = 0.59633889\n","Iteration 184, loss = 0.59530847\n","Iteration 185, loss = 0.59661264\n","Iteration 186, loss = 0.59565793\n","Iteration 187, loss = 0.59520419\n","Iteration 188, loss = 0.59506179\n","Iteration 189, loss = 0.59423254\n","Iteration 190, loss = 0.59419133\n","Iteration 191, loss = 0.59473014\n","Iteration 192, loss = 0.59450226\n","Iteration 193, loss = 0.59356507\n","Iteration 194, loss = 0.59413409\n","Iteration 195, loss = 0.59394570\n","Iteration 196, loss = 0.59319561\n","Iteration 197, loss = 0.59245410\n","Iteration 198, loss = 0.59273637\n","Iteration 199, loss = 0.59248477\n","Iteration 200, loss = 0.59208022\n","Iteration 201, loss = 0.59243042\n","Iteration 202, loss = 0.59269570\n","Iteration 203, loss = 0.59217814\n","Iteration 204, loss = 0.59195716\n","Iteration 205, loss = 0.59135854\n","Iteration 206, loss = 0.59143814\n","Iteration 207, loss = 0.59095127\n","Iteration 208, loss = 0.59132274\n","Iteration 209, loss = 0.59132945\n","Iteration 210, loss = 0.59087924\n","Iteration 211, loss = 0.59040240\n","Iteration 212, loss = 0.58941413\n","Iteration 213, loss = 0.59089685\n","Iteration 214, loss = 0.59019589\n","Iteration 215, loss = 0.58954147\n","Iteration 216, loss = 0.58951263\n","Iteration 217, loss = 0.58932788\n","Iteration 218, loss = 0.58996970\n","Iteration 219, loss = 0.59124669\n","Iteration 220, loss = 0.58955344\n","Iteration 221, loss = 0.58980457\n","Iteration 222, loss = 0.58911697\n","Iteration 223, loss = 0.58941307\n","Iteration 224, loss = 0.58842412\n","Iteration 225, loss = 0.58764489\n","Iteration 226, loss = 0.58857170\n","Iteration 227, loss = 0.58891451\n","Iteration 228, loss = 0.58808575\n","Iteration 229, loss = 0.58795991\n","Iteration 230, loss = 0.58670980\n","Iteration 231, loss = 0.58697644\n","Iteration 232, loss = 0.58765488\n","Iteration 233, loss = 0.58737381\n","Iteration 234, loss = 0.58687283\n","Iteration 235, loss = 0.58880344\n","Iteration 236, loss = 0.58641320\n","Iteration 237, loss = 0.58625405\n","Iteration 238, loss = 0.58637894\n","Iteration 239, loss = 0.58695738\n","Iteration 240, loss = 0.58641183\n","Iteration 241, loss = 0.58686164\n","Iteration 242, loss = 0.58638319\n","Iteration 243, loss = 0.58601531\n","Iteration 244, loss = 0.58596654\n","Iteration 245, loss = 0.58609142\n","Iteration 246, loss = 0.58510737\n","Iteration 247, loss = 0.58610257\n","Iteration 248, loss = 0.58488398\n","Iteration 249, loss = 0.58487735\n","Iteration 250, loss = 0.58531402\n","Iteration 251, loss = 0.58517487\n","Iteration 252, loss = 0.58403325\n","Iteration 253, loss = 0.58502791\n","Iteration 254, loss = 0.58557940\n","Iteration 255, loss = 0.58473568\n","Iteration 256, loss = 0.58431473\n","Iteration 257, loss = 0.58409743\n","Iteration 258, loss = 0.58449326\n","Iteration 259, loss = 0.58382829\n","Iteration 260, loss = 0.58412084\n","Iteration 261, loss = 0.58392938\n","Iteration 262, loss = 0.58480494\n","Iteration 263, loss = 0.58346882\n","Iteration 264, loss = 0.58417159\n","Iteration 265, loss = 0.58307998\n","Iteration 266, loss = 0.58264280\n","Iteration 267, loss = 0.58428037\n","Iteration 268, loss = 0.58303127\n","Iteration 269, loss = 0.58346368\n","Iteration 270, loss = 0.58211902\n","Iteration 271, loss = 0.58404193\n","Iteration 272, loss = 0.58319257\n","Iteration 273, loss = 0.58265452\n","Iteration 274, loss = 0.58182211\n","Iteration 275, loss = 0.58253300\n","Iteration 276, loss = 0.58177326\n","Iteration 277, loss = 0.58159585\n","Iteration 278, loss = 0.58213477\n","Iteration 279, loss = 0.58255187\n","Iteration 280, loss = 0.58360217\n","Iteration 281, loss = 0.58113592\n","Iteration 282, loss = 0.58201032\n","Iteration 283, loss = 0.58140311\n","Iteration 284, loss = 0.58043490\n","Iteration 285, loss = 0.58147921\n","Iteration 286, loss = 0.58162425\n","Iteration 287, loss = 0.58324222\n","Iteration 288, loss = 0.58146447\n","Iteration 289, loss = 0.58126795\n","Iteration 290, loss = 0.57999026\n","Iteration 291, loss = 0.58133593\n","Iteration 292, loss = 0.58117150\n","Iteration 293, loss = 0.58117449\n","Iteration 294, loss = 0.57969952\n","Iteration 295, loss = 0.57992616\n","Iteration 296, loss = 0.57974923\n","Iteration 297, loss = 0.57984377\n","Iteration 298, loss = 0.57982310\n","Iteration 299, loss = 0.57951469\n","Iteration 300, loss = 0.58036606\n","Iteration 301, loss = 0.57970682\n","Iteration 302, loss = 0.57943904\n","Iteration 303, loss = 0.58029425\n","Iteration 304, loss = 0.57931932\n","Iteration 305, loss = 0.57917234\n","Iteration 306, loss = 0.57977274\n","Iteration 307, loss = 0.57951644\n","Iteration 308, loss = 0.57981868\n","Iteration 309, loss = 0.57874897\n","Iteration 310, loss = 0.57912406\n","Iteration 311, loss = 0.57926207\n","Iteration 312, loss = 0.57875722\n","Iteration 313, loss = 0.57914366\n","Iteration 314, loss = 0.57837286\n","Iteration 315, loss = 0.57930188\n","Iteration 316, loss = 0.57935999\n","Iteration 317, loss = 0.57877705\n","Iteration 318, loss = 0.57823321\n","Iteration 319, loss = 0.57791751\n","Iteration 320, loss = 0.57736132\n","Iteration 321, loss = 0.57875030\n","Iteration 322, loss = 0.57740491\n","Iteration 323, loss = 0.57868101\n","Iteration 324, loss = 0.57756547\n","Iteration 325, loss = 0.57838619\n","Iteration 326, loss = 0.57777189\n","Iteration 327, loss = 0.57812753\n","Iteration 328, loss = 0.57848824\n","Iteration 329, loss = 0.57724233\n","Iteration 330, loss = 0.57778431\n","Iteration 331, loss = 0.57759812\n","Iteration 332, loss = 0.57789353\n","Iteration 333, loss = 0.57861093\n","Iteration 334, loss = 0.57691502\n","Iteration 335, loss = 0.57790430\n","Iteration 336, loss = 0.57787460\n","Iteration 337, loss = 0.57679826\n","Iteration 338, loss = 0.57672320\n","Iteration 339, loss = 0.57681628\n","Iteration 340, loss = 0.57692069\n","Iteration 341, loss = 0.57631014\n","Iteration 342, loss = 0.57808747\n","Iteration 343, loss = 0.57668085\n","Iteration 344, loss = 0.57633970\n","Iteration 345, loss = 0.57683273\n","Iteration 346, loss = 0.57550831\n","Iteration 347, loss = 0.57507923\n","Iteration 348, loss = 0.57627839\n","Iteration 349, loss = 0.57577121\n","Iteration 350, loss = 0.57525925\n","Iteration 351, loss = 0.57579526\n","Iteration 352, loss = 0.57463190\n","Iteration 353, loss = 0.57659278\n","Iteration 354, loss = 0.57596738\n","Iteration 355, loss = 0.57608393\n","Iteration 356, loss = 0.57506080\n","Iteration 357, loss = 0.57552761\n","Iteration 358, loss = 0.57615010\n","Iteration 359, loss = 0.57633289\n","Iteration 360, loss = 0.57518092\n","Iteration 361, loss = 0.57631796\n","Iteration 362, loss = 0.57586633\n","Iteration 363, loss = 0.57588898\n","Training loss did not improve more than tol=0.000100 for 10 consecutive epochs. Stopping.\n","0.6789528074405787\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"mZPcBPxLLH76","colab_type":"text"},"source":["### Training Loss Curve"]},{"cell_type":"code","metadata":{"id":"1Npn7grL2kbY","colab_type":"code","outputId":"5d854f46-b2a2-4d6b-9572-b3d4c41bee43","executionInfo":{"status":"ok","timestamp":1576023281513,"user_tz":300,"elapsed":737,"user":{"displayName":"Hanxiang Pan","photoUrl":"","userId":"16188875245657924869"}},"colab":{"base_uri":"https://localhost:8080/","height":282}},"source":["plt.plot(clf_mlp.loss_curve_)"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[<matplotlib.lines.Line2D at 0x7fa545d7e160>]"]},"metadata":{"tags":[]},"execution_count":15},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"markdown","metadata":{"id":"7uSq-6Y7LyP1","colab_type":"text"},"source":["### Training Error"]},{"cell_type":"code","metadata":{"id":"fFvmAKoYqOZX","colab_type":"code","outputId":"c4b1465a-0407-4210-ce9a-caee6d0f470d","executionInfo":{"status":"ok","timestamp":1576023299473,"user_tz":300,"elapsed":767,"user":{"displayName":"Hanxiang Pan","photoUrl":"","userId":"16188875245657924869"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["y_pred2_train = clf_mlp.predict(X_train)\n","score_mlp = accuracy_score(y_pred2_train, Y_train)\n","print(score_mlp)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["0.769645933014354\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"D-gaO2c5NNS1","colab_type":"text"},"source":["### Other Models\n","Note that some of the models below were used only for producing a baseline result, and after adding additional features post-checkpoint, some models are no longer supported due to incompatible data formats (e.g. negative values etc...). But they're included here for referencing on how the results in the checkpoint were produced."]},{"cell_type":"code","metadata":{"id":"XflLOAg18FLF","colab_type":"code","colab":{}},"source":["clf = MultinomialNB().fit(X_train, Y_train)\n","y_pred = clf.predict(X_test)\n","score = accuracy_score(y_pred, y_test)\n","print('Naive Bayes: {}'.format(score))\n","result_df = result_df.append([[\"Naive Bayes\", score]])\n","\n","clf_linear = LinearRegression().fit(X_train, Y_train)\n","y_pred_linear = int(round(clf_linear.predict(X_test)))\n","score_linear = accuracy_score(y_pred_linear, y_test)\n","print('Linear Regression: {}'.format(score_linear))\n","result_df = result_df.append([[\"Linear Regression\", score_linear]])\n","\n","clf_logistic = LogisticRegression(penalty='l2').fit(X_train, Y_train)\n","y_pred2_logistic = clf_logistic.predict(X_test)\n","score2_logistic = accuracy_score(y_pred2_logistic, Y_test)\n","print('Logistic Regression: {}'.format(score2_logistic))\n","result_df = result_df.append([[\"Logistic Regression\", score_logistic]])\n","\n","clf_svm = svm.SVC(gamma='scale', decision_function_shape='ovo')\n","clf_svm.fit(X_train, Y_train)\n","y_pred_svm = clf_svm.predict(X_test)\n","score_svm = accuracy_score(y_pred_svm, y_test)\n","print('Linear SVM (one-vs-one): {}'.format(score_svm))\n","result_df = result_df.append([[\"SVM\", score_svm]])\n","\n","clf_SGD = SGDClassifier(max_iter=500).fit(X_train, Y_train)\n","y_pred_SGD = clf_SGD.predict(X_test)\n","score_SGD = accuracy_score(y_pred_SGD, Y_test)\n","print('SGD: {}'.format(score_SGD))\n","result_df = result_df.append([[\"SGD\", score_SGD]])\n","\n","clf_ridge = RidgeClassifier(max_iter=1000).fit(X_train, Y_train)\n","y_pred_ridge = clf_ridge.predict(X_test)\n","score_ridge = accuracy_score(y_pred_ridge, y_test)\n","print('Ridge: {}'.format(score_ridge))\n","result_df = result_df.append([[\"Ridge Regression\", score_ridge]])\n","\n","clf_rfc = RandomForestClassifier()\n","clf_rfc.fit(X_train, Y_train)\n","y_pred_rfc = clf_rfc.predict(X_test)\n","score_rfc = accuracy_score(y_pred_rfc, y_test)\n","print('Random Forest: {}'.format(score_rfc))\n","result_df = result_df.append([[\"Random Forest\", score_rfc]])\n","\n","clf_gbc = GradientBoostingClassifier()\n","clf_gbc.fit(X_train, Y_train)\n","y_pred_gbc = clf_gbc.predict(X_test)\n","score_gbc = accuracy_score(y_pred_gbc, y_test)\n","print('Gradient Tree Boosting: {}'.format(score_gbc))\n","result_df = result_df.append([[\"Gradient Boosting\", score_gbc]])\n","\n","clf_linear_svm = svm.LinearSVC(random_state=0, tol=1e-5)\n","clf_linear_svm.fit(X_train, Y_train)\n","y_pred_linear_svm = clf_linear_svm.predict(X_test)\n","score_svm = accuracy_score(y_pred_linear_svm, y_test)\n","print('Linear SVM (One-vs-Rest): {}'.format(score_svm))\n","result_df = result_df.append([[\"SVM_Linear\", score_svm]])"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"7WDte7mGV0wF","colab_type":"code","outputId":"9b542377-693f-4f67-a2b7-959beb4ba741","executionInfo":{"status":"ok","timestamp":1574887417545,"user_tz":300,"elapsed":206853,"user":{"displayName":"Zijie Song","photoUrl":"","userId":"10885415975558135812"}},"colab":{"base_uri":"https://localhost:8080/","height":252}},"source":["result_df # From the checkpoint"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>0</th>\n","      <th>1</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Naive Bayes</td>\n","      <td>0.217677</td>\n","    </tr>\n","    <tr>\n","      <th>0</th>\n","      <td>SVM</td>\n","      <td>0.171658</td>\n","    </tr>\n","    <tr>\n","      <th>0</th>\n","      <td>SGD</td>\n","      <td>0.202337</td>\n","    </tr>\n","    <tr>\n","      <th>0</th>\n","      <td>Ridge Regression</td>\n","      <td>0.207659</td>\n","    </tr>\n","    <tr>\n","      <th>0</th>\n","      <td>Random Forest</td>\n","      <td>0.136492</td>\n","    </tr>\n","    <tr>\n","      <th>0</th>\n","      <td>Gradient Boosting</td>\n","      <td>0.139414</td>\n","    </tr>\n","    <tr>\n","      <th>0</th>\n","      <td>SVM_Linear</td>\n","      <td>0.202024</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["                   0         1\n","0        Naive Bayes  0.217677\n","0                SVM  0.171658\n","0                SGD  0.202337\n","0   Ridge Regression  0.207659\n","0      Random Forest  0.136492\n","0  Gradient Boosting  0.139414\n","0         SVM_Linear  0.202024"]},"metadata":{"tags":[]},"execution_count":60}]}]}